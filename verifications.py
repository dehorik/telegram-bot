import asyncio
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from aiogram.types import Message
from json import loads, dumps

from database import DataBase
from filters import UserStates
import keyboards


INCORRECT_VALUES = ".,'+)(*&^%$#@!:;'?/\\"

async def check_spam(msg: Message, state: FSMContext, verify_state, db: DataBase, timer=15, callback=None):
    if await state.get_state() == verify_state:
        data1 = await state.get_data()
        counter1 = data1['spam']
        time1 = data1['start_operation']

        await asyncio.sleep(timer)

        if await state.get_state() == verify_state:
            data2 = await state.get_data()
            counter2 = data2['spam']
            time2 = data2['start_operation']

            if counter1 == counter2 and time1 == time2:
                if callback:
                    await callback.edit_reply_markup(reply_markup=None)

                text = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è! ‚è±Ô∏è \n–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞'
                await msg.answer(text)
                await state.clear()

                kb, text2 = await keyboards.get_main_keyboard(msg, db)
                await msg.answer(text2, reply_markup=kb, parse_mode=ParseMode.HTML)
            else:
                return

async def check_spam_balance(msg: Message, state: FSMContext, db: DataBase):
    if await state.get_state() == UserStates.set_balance:
        spam1 = await state.get_data()
        spam1 = spam1['spam']

        await asyncio.sleep(120)

        if await state.get_state() == UserStates.set_balance:
            spam2 = await state.get_data()
            spam2 = spam2['spam']

            if spam1 == spam2:
                await msg.answer(keyboards.bad_expect_balance)
                await state.clear()
                db.insert_db(msg.from_user.id, '0')

                kb, text = await keyboards.get_main_keyboard(msg, db)
                await msg.answer(text, reply_markup=kb, parse_mode=ParseMode.HTML)

async def check_how_much_spam(msg: Message, state: FSMContext, db: DataBase, howmuch=5):
    data = await state.get_data()
    value = data['spam']

    if value > howmuch:
        await msg.answer('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫! ü´£\n–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞')
        await state.clear()

        kb, text = await keyboards.get_main_keyboard(msg, db)
        await msg.answer(text, reply_markup=kb, parse_mode=ParseMode.HTML)
        return True
    else:
        return False

async def add_spam(state: FSMContext):
    data = await state.get_data()
    value = data['spam'] + 1
    await state.update_data(spam=value)


def verify_user(user_id, db: DataBase):
    if len(db.select_everything_db(user_id)) == 0:
        return False
    else:
        return True

def check_current_balance(user_id, sum_operation, db: DataBase):
    res = db.select_db(user_id, 'balance')
    balance = int(res[0][0])

    if balance + int(sum_operation) > 5000000:
        return '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞! ü§•\n–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞'

    if balance + int(sum_operation) < -5000000:
        return '–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –±–∞–ª–∞–Ω—Å! ü´°\n–û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞'

    return 'success'

def check_balance(balance):
    try:
        for i in INCORRECT_VALUES:
            if i in balance:
                return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! üôÑ'

        if balance[0] == '0' and len(balance) > 1:
            return '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω—É–ª—è üòê'

        balance = int(balance)
        if balance < -5000000:
            return '–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ üòí'
        if balance > 5000000:
            return '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ üò¶'

        return 'success'

    except ValueError:
        return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! üôÑ'

def check_target(target):
    try:
        for i in INCORRECT_VALUES:
            if i in target:
                return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! üôÑ'

        if target[0] == '0' and len(target) > 1:
            return '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω—É–ª—è üòê'

        target = int(target)
        if target < -5000000:
            return '–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ü´®'
        if target > 5000000:
            return '–•–≤–∞—Ç–∏—Ç —Å—Ç—Ä–æ–∏—Ç—å –Ω–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–ª–∞–Ω—ã ü§®'

        return 'success'

    except ValueError:
        return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! üôÑ'

def check_name_operation(name):
    if len(name) < 2:
        return '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ! üòê'
    if len(name) > 16:
        return '–ü—Ä–µ–≤—ã—à–µ–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è! ü´§'
    else:
        return 'success'

def check_sum_operation(value):
    try:
        for i in INCORRECT_VALUES:
            if i in value:
                return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! üôÑ'

        if value == '0':
            return '–ë–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è üòê'
        if value[0] == '0':
            return '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω—É–ª—è üòê'

        value = int(value)
        if value < 1:
            return '–¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞ ü´§'
        if value > 400000:
            return '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ü§ì'

        return 'success'

    except ValueError:
        return '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ! üôÑ'


def get_string(dictionary):
    return dumps(dictionary)

def get_dictionary(string):
    return loads(string)


